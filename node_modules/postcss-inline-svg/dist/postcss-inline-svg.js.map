{"version":3,"file":null,"sources":["../src/parseRule.js","../src/parseDecl.js","../src/resolveId.js","../src/render.js","../src/defaults.js","../src/processors.js","../src/load.js","../src/index.js"],"sourcesContent":["import valueParser from 'postcss-value-parser';\r\n\r\nexport function parseRuleDefinition(params) {\r\n    const { nodes } = valueParser(params);\r\n    if (nodes.length !== 3 ||\r\n        nodes[0].type !== 'word' ||\r\n        nodes[1].type !== 'space' ||\r\n        nodes[2].type !== 'function' ||\r\n        nodes[2].value !== 'url' ||\r\n        nodes[2].nodes.length === 0\r\n    ) {\r\n        throw Error('Invalid \"@svg-load\" definition');\r\n    }\r\n    return {\r\n        name: nodes[0].value,\r\n        url: nodes[2].nodes[0].value\r\n    };\r\n}\r\n\r\nexport function getRuleParams(rule) {\r\n    const params = {};\r\n    const selectors = {};\r\n\r\n    rule.each(node => {\r\n        if (node.type === 'decl') {\r\n            params[node.prop] = node.value;\r\n        } else if (node.type === 'rule') {\r\n            const selector = selectors[node.selectors] || {};\r\n            node.each(child => {\r\n                if (child.type === 'decl') {\r\n                    selector[child.prop] = child.value;\r\n                }\r\n            });\r\n            selectors[node.selectors] = selector;\r\n        }\r\n    });\r\n\r\n    return {\r\n        params,\r\n        selectors\r\n    };\r\n}\r\n","import valueParser, { stringify } from 'postcss-value-parser';\r\n\r\nconst invalidDeclLoad = `Invalid \"svg-load()\" definition`;\r\n\r\nfunction getUrl(nodes) {\r\n    let url = '';\r\n    let urlEnd = 0;\r\n\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.type === 'string') {\r\n            if (i !== 0) {\r\n                throw Error(invalidDeclLoad);\r\n            }\r\n            url = node.value;\r\n            urlEnd = i + 1;\r\n            break;\r\n        }\r\n        if (node.type === 'div' && node.value === ',') {\r\n            if (i === 0) {\r\n                throw Error(invalidDeclLoad);\r\n            }\r\n            urlEnd = i;\r\n            break;\r\n        }\r\n        url += stringify(node);\r\n        urlEnd += 1;\r\n    }\r\n\r\n    return {\r\n        url,\r\n        urlEnd\r\n    };\r\n}\r\n\r\nfunction getParamChunks(nodes) {\r\n    const list = [];\r\n    const lastArg = nodes.reduce((arg, node) => {\r\n        if (node.type === 'word' || node.type === 'string') {\r\n            return arg + node.value;\r\n        }\r\n        if (node.type === 'space') {\r\n            return arg + ' ';\r\n        }\r\n        if (node.type === 'div' && node.value === ',') {\r\n            list.push(arg);\r\n            return '';\r\n        }\r\n        return arg + stringify(node);\r\n    }, '');\r\n\r\n    return list.concat(lastArg);\r\n}\r\n\r\nfunction splitParams(list) {\r\n    const params = {};\r\n\r\n    list.reduce((sep, arg) => {\r\n        if (!arg) {\r\n            throw Error(invalidDeclLoad);\r\n        }\r\n\r\n        if (!sep) {\r\n            if (arg.indexOf(':') !== -1) {\r\n                sep = ':';\r\n            } else if (arg.indexOf('=') !== -1) {\r\n                sep = '=';\r\n            } else {\r\n                throw Error(`Expected \":\" or \"=\" separator in \"${arg}\"`);\r\n            }\r\n        }\r\n\r\n        const pair = arg.split(sep);\r\n        if (pair.length !== 2) {\r\n            throw Error(`Expected \"${sep}\" separator in \"${arg}\"`);\r\n        }\r\n        params[pair[0].trim()] = pair[1].trim();\r\n\r\n        return sep;\r\n    }, null);\r\n\r\n    return params;\r\n}\r\n\r\nfunction getLoader(parsedValue, valueNode) {\r\n    if (!valueNode.nodes.length) {\r\n        throw Error(invalidDeclLoad);\r\n    }\r\n\r\n    // parse url\r\n    const { url, urlEnd } = getUrl(valueNode.nodes);\r\n\r\n    // parse params\r\n    const paramsNodes = valueNode.nodes.slice(urlEnd + 1);\r\n    const params = urlEnd !== valueNode.nodes.length ? splitParams(getParamChunks(paramsNodes)) : {};\r\n\r\n    return {\r\n        url,\r\n        params,\r\n        valueNode,\r\n        parsedValue\r\n    };\r\n}\r\n\r\nfunction getInliner(parsedValue, valueNode) {\r\n    if (!valueNode.nodes.length) {\r\n        throw Error(`Invalid \"svg-inline()\" statement`);\r\n    }\r\n    const name = valueNode.nodes[0].value;\r\n\r\n    return {\r\n        name,\r\n        valueNode,\r\n        parsedValue\r\n    };\r\n}\r\n\r\nexport function parseDeclValue(value) {\r\n    const loaders = [];\r\n    const inliners = [];\r\n    const parsedValue = valueParser(value);\r\n\r\n    parsedValue.walk(valueNode => {\r\n        if (valueNode.type === 'function') {\r\n            if (valueNode.value === 'svg-load') {\r\n                loaders.push(getLoader(parsedValue, valueNode));\r\n            } else if (valueNode.value === 'svg-inline') {\r\n                inliners.push(getInliner(parsedValue, valueNode));\r\n            }\r\n        }\r\n    });\r\n\r\n    return {\r\n        loaders,\r\n        inliners\r\n    };\r\n}\r\n","import { dirname, resolve } from 'path';\r\n\r\nexport default function resolveId(file, url, opts) {\r\n    if (opts.path) {\r\n        return resolve(opts.path, url);\r\n    }\r\n    if (file) {\r\n        return resolve(dirname(file), url);\r\n    }\r\n    return resolve(url);\r\n}\r\n","import { parseDOM } from 'htmlparser2';\r\nimport serialize from 'dom-serializer';\r\n\r\nexport default function render(code, ...processors) {\r\n    const dom = parseDOM(code, { xmlMode: true });\r\n\r\n    processors.forEach(processor => processor(dom));\r\n\r\n    return serialize(dom);\r\n}\r\n","export function encode(code) {\r\n    return code\r\n        .replace(/%/g, '%25')\r\n        .replace(/</g, '%3C')\r\n        .replace(/>/g, '%3E')\r\n        .replace(/&/g, '%26')\r\n        .replace(/#/g, '%23');\r\n}\r\n\r\nfunction normalize(code) {\r\n    return code\r\n        .replace(/'/g, '%22')\r\n        .replace(/\"/g, '\\'')\r\n        .replace(/\\s+/g, ' ')\r\n        .trim();\r\n}\r\n\r\nexport function transform(code) {\r\n    return `\"data:image/svg+xml;charset=utf-8,${normalize(code)}\"`;\r\n}\r\n","import { selectOne, selectAll } from 'css-select';\r\n\r\nfunction matchId(exp, id) {\r\n    return exp instanceof RegExp ? exp.test(id) : Boolean(exp);\r\n}\r\n\r\nfunction removeFillAttrib(element) {\r\n    delete element.attribs.fill;\r\n}\r\n\r\nexport function removeFill(id, opts) {\r\n    return dom => {\r\n        if (matchId(opts.removeFill, id)) {\r\n            selectAll('[fill]', dom).forEach(removeFillAttrib);\r\n        }\r\n    };\r\n}\r\n\r\nfunction applyParams(params) {\r\n    return ({ attribs }) => {\r\n        Object.keys(params).forEach(name => {\r\n            attribs[name] = params[name];\r\n        });\r\n    };\r\n}\r\n\r\nexport function applyRootParams(params) {\r\n    return dom => {\r\n        applyParams(params)(selectOne('svg', dom));\r\n    };\r\n}\r\n\r\nexport function applySelectedParams(selectors) {\r\n    return dom => {\r\n        const svg = selectOne('svg', dom);\r\n\r\n        Object.keys(selectors).forEach(selector => {\r\n            selectAll(selector, svg).forEach(applyParams(selectors[selector]));\r\n        });\r\n    };\r\n}\r\n","import { readFile } from 'fs';\r\nimport render from './render.js';\r\nimport { transform, encode } from './defaults.js';\r\nimport { removeFill, applyRootParams, applySelectedParams } from './processors.js';\r\n\r\nfunction read(id) {\r\n    return new Promise((resolve, reject) => {\r\n        readFile(id, 'utf-8', (err, data) => {\r\n            if (err) {\r\n                reject(Error(`Can't load '${id}'`));\r\n            } else {\r\n                resolve(data);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport default function load(id, params, selectors, opts) {\r\n    const processors = [\r\n        removeFill(id, opts),\r\n        applyRootParams(params),\r\n        applySelectedParams(selectors)\r\n    ];\r\n    return read(id).then(data => {\r\n        let code = render(data, ...processors);\r\n\r\n        if (opts.encode !== false) {\r\n            code = (opts.encode || encode)(code);\r\n        }\r\n\r\n        if (opts.transform !== false) {\r\n            code = (opts.transform || transform)(code, id);\r\n        }\r\n\r\n        return code;\r\n    });\r\n}\r\n","import postcss from 'postcss';\nimport { parseRuleDefinition, getRuleParams } from './parseRule.js';\nimport { parseDeclValue } from './parseDecl.js';\nimport resolveId from './resolveId.js';\nimport load from './load.js';\n\nfunction removeLoader(loader) {\n    if (!loader.error && loader.node.type === 'atrule') {\n        loader.node.remove();\n    }\n}\n\nfunction applyInliner(inliner) {\n    if (!inliner.loader.error) {\n        inliner.valueNode.value = 'url';\n        inliner.valueNode.nodes = [{\n            type: 'word',\n            value: inliner.loader.svg\n        }];\n    }\n}\n\nfunction stringifyInliner(inliner) {\n    if (!inliner.loader.error) {\n        inliner.node.value = String(inliner.parsedValue);\n    }\n}\n\nexport default postcss.plugin('postcss-inline-svg', (opts = {}) => (css, result) => {\n    const loadersMap = {};\n    const loaders = [];\n    const inliners = [];\n\n    css.walk(node => {\n        if (node.type === 'atrule') {\n            if (node.name === 'svg-load') {\n                try {\n                    const file = node.source && node.source.input && node.source.input.file;\n                    const { name, url } = parseRuleDefinition(node.params);\n                    const { params, selectors } = getRuleParams(node);\n                    const loader = {\n                        id: resolveId(file, url, opts),\n                        parent: file,\n                        params,\n                        selectors,\n                        node\n                    };\n                    loaders.push(loader);\n                    loadersMap[name] = loader;\n                } catch (e) {\n                    node.warn(result, e.message);\n                }\n            }\n        } else if (node.type === 'decl') {\n            if (node.value.indexOf('svg-load(') !== -1 ||\n                node.value.indexOf('svg-inline(') !== -1\n            ) {\n                try {\n                    const file = node.source && node.source.input && node.source.input.file;\n                    const statements = parseDeclValue(node.value);\n                    statements.loaders.forEach(({ url, params, valueNode, parsedValue }) => {\n                        const loader = {\n                            id: resolveId(file, url, opts),\n                            parent: file,\n                            params,\n                            selectors: {},\n                            node\n                        };\n                        loaders.push(loader);\n                        inliners.push({\n                            loader,\n                            node,\n                            valueNode,\n                            parsedValue\n                        });\n                    });\n                    statements.inliners.forEach(({ name, valueNode, parsedValue }) => {\n                        const loader = loadersMap[name];\n                        if (loader) {\n                            inliners.push({\n                                loader,\n                                node,\n                                valueNode,\n                                parsedValue\n                            });\n                        } else {\n                            node.warn(result, `\"${name}\" svg is not defined`);\n                        }\n                    });\n                } catch (e) {\n                    node.warn(result, e.message);\n                }\n            }\n        }\n    });\n\n    const promises = loaders.map(loader => {\n        return load(loader.id, loader.params, loader.selectors, opts).then(code => {\n            loader.svg = code;\n            result.messages.push({\n                type: 'dependency',\n                file: loader.id,\n                parent: loader.parent\n            });\n        }).catch(err => {\n            loader.error = true;\n            loader.node.warn(result, err.message);\n        });\n    });\n\n    return Promise.all(promises).then(() => {\n        loaders.forEach(removeLoader);\n        inliners.forEach(applyInliner);\n        inliners.forEach(stringifyInliner);\n    });\n});\n"],"names":["valueParser","const","let","stringify","resolve","dirname","parseDOM","selectAll","selectOne","readFile","file"],"mappings":"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"}